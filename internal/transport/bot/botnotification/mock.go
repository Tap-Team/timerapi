// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/transport/bot/run.go

// Package bot is a generated GoMock package.
package botnotification

import (
	reflect "reflect"

	api "github.com/SevereCloud/vksdk/v2/api"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// MessagesSend mocks base method.
func (m *MockMessageSender) MessagesSend(params api.Params) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagesSend", params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagesSend indicates an expected call of MessagesSend.
func (mr *MockMessageSenderMockRecorder) MessagesSend(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagesSend", reflect.TypeOf((*MockMessageSender)(nil).MessagesSend), params)
}
