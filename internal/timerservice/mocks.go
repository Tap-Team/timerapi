// Code generated by MockGen. DO NOT EDIT.
// Source: internal/timerservice/grpc.go

// Package timerservice is a generated GoMock package.
package timerservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTimerServiceClient is a mock of TimerServiceClient interface.
type MockTimerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTimerServiceClientMockRecorder
}

// MockTimerServiceClientMockRecorder is the mock recorder for MockTimerServiceClient.
type MockTimerServiceClientMockRecorder struct {
	mock *MockTimerServiceClient
}

// NewMockTimerServiceClient creates a new mock instance.
func NewMockTimerServiceClient(ctrl *gomock.Controller) *MockTimerServiceClient {
	mock := &MockTimerServiceClient{ctrl: ctrl}
	mock.recorder = &MockTimerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimerServiceClient) EXPECT() *MockTimerServiceClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTimerServiceClient) Add(ctx context.Context, timerId uuid.UUID, endTime int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, timerId, endTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTimerServiceClientMockRecorder) Add(ctx, timerId, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTimerServiceClient)(nil).Add), ctx, timerId, endTime)
}

// AddMany mocks base method.
func (m *MockTimerServiceClient) AddMany(ctx context.Context, timers map[uuid.UUID]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMany", ctx, timers)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMany indicates an expected call of AddMany.
func (mr *MockTimerServiceClientMockRecorder) AddMany(ctx, timers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMany", reflect.TypeOf((*MockTimerServiceClient)(nil).AddMany), ctx, timers)
}

// Remove mocks base method.
func (m *MockTimerServiceClient) Remove(ctx context.Context, timerId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, timerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockTimerServiceClientMockRecorder) Remove(ctx, timerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockTimerServiceClient)(nil).Remove), ctx, timerId)
}

// Start mocks base method.
func (m *MockTimerServiceClient) Start(ctx context.Context, timerId uuid.UUID, endTime int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, timerId, endTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTimerServiceClientMockRecorder) Start(ctx, timerId, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTimerServiceClient)(nil).Start), ctx, timerId, endTime)
}

// Stop mocks base method.
func (m *MockTimerServiceClient) Stop(ctx context.Context, timerId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, timerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockTimerServiceClientMockRecorder) Stop(ctx, timerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTimerServiceClient)(nil).Stop), ctx, timerId)
}

// TimerTick mocks base method.
func (m *MockTimerServiceClient) TimerTick(ctx context.Context) (<-chan []uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimerTick", ctx)
	ret0, _ := ret[0].(<-chan []uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TimerTick indicates an expected call of TimerTick.
func (mr *MockTimerServiceClientMockRecorder) TimerTick(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimerTick", reflect.TypeOf((*MockTimerServiceClient)(nil).TimerTick), ctx)
}
