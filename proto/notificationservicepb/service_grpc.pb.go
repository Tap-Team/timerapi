// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: proto/notificationservicepb/service.proto

package notificationservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	NotificationStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (NotificationService_NotificationStreamClient, error)
	Notifications(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*RepeatedNotification, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) NotificationStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (NotificationService_NotificationStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], "/notificationservicepb.NotificationService/NotificationStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceNotificationStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationService_NotificationStreamClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type notificationServiceNotificationStreamClient struct {
	grpc.ClientStream
}

func (x *notificationServiceNotificationStreamClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationServiceClient) Notifications(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*RepeatedNotification, error) {
	out := new(RepeatedNotification)
	err := c.cc.Invoke(ctx, "/notificationservicepb.NotificationService/Notifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	NotificationStream(*emptypb.Empty, NotificationService_NotificationStreamServer) error
	Notifications(context.Context, *Ids) (*RepeatedNotification, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) NotificationStream(*emptypb.Empty, NotificationService_NotificationStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method NotificationStream not implemented")
}
func (UnimplementedNotificationServiceServer) Notifications(context.Context, *Ids) (*RepeatedNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notifications not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_NotificationStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).NotificationStream(m, &notificationServiceNotificationStreamServer{stream})
}

type NotificationService_NotificationStreamServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type notificationServiceNotificationStreamServer struct {
	grpc.ServerStream
}

func (x *notificationServiceNotificationStreamServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _NotificationService_Notifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Notifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationservicepb.NotificationService/Notifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Notifications(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notificationservicepb.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notifications",
			Handler:    _NotificationService_Notifications_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotificationStream",
			Handler:       _NotificationService_NotificationStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/notificationservicepb/service.proto",
}
